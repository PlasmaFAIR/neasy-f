module test_write
  use funit
  use netcdf
  use neasyf
  implicit none

  character(len=1024) :: temp_file
  integer :: file_id

contains
  @before
  subroutine setup
    character(len=1024) :: temp_dir
    integer :: length, status

    call get_environment_variable("TMP", temp_dir, length, status)
    if (length == 0 .or. status /= 0) call get_environment_variable("TEMP", temp_dir, length, status)
    if (length == 0 .or. status /= 0) call get_environment_variable("TMPDIR", temp_dir, length, status)
    if (length == 0 .or. status /= 0) temp_dir = "/tmp"

    temp_file = trim(temp_dir) // "/test.nc"

    file_id = neasyf_open(temp_file, "w")
  end subroutine setup

  @after
  subroutine teardown
    integer :: unit
    open(newunit=unit, file=temp_file)
    close(unit, status="delete")
    neasyf_default_compression = 0
  end subroutine teardown

  @test
  subroutine test_write_scalar
    integer, parameter :: read_data = 5
    integer :: expected_data
    integer :: var_id

    call neasyf_write(file_id, "data", read_data)
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_scalar

  @test
  subroutine test_write_scalar_unlimited
    integer, dimension(2), parameter :: read_data = [5, 6]
    integer, dimension(2) :: expected_data
    integer :: var_id

    call neasyf_dim(file_id, "t", unlimited=.true.)
    call neasyf_write(file_id, "t", read_data(1), dim_names=["t"], start=[1])
    call neasyf_write(file_id, "t", read_data(2), dim_names=["t"], start=[2])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "t", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_scalar_unlimited

  @test
  subroutine test_write_1d
    integer, parameter :: NX = 5
    real, dimension(NX), parameter :: read_data = [55.5, 44.4, 33.3, 22.2, 11.1]
    real, dimension(NX) :: expected_data
    integer :: x_dim_id, var_id

    call neasyf_dim(file_id, "x", dim_size=NX, dimid=x_dim_id)
    call neasyf_write(file_id, "data", read_data, [x_dim_id])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_1d

  @test
  subroutine test_write_2d
    integer, parameter :: nx = 5, ny = 3
    integer :: i
    real, dimension(nx, ny), parameter :: read_data = reshape([(i, i=1, nx*ny)], shape(read_data))
    real, dimension(nx, ny) :: expected_data
    integer :: x_dim_id, y_dim_id, var_id

    call neasyf_dim(file_id, "x", dim_size=nx, dimid=x_dim_id)
    call neasyf_dim(file_id, "y", dim_size=ny, dimid=y_dim_id)
    call neasyf_write(file_id, "data", read_data, [x_dim_id, y_dim_id])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_2d

  @test
  subroutine test_write_2d_unlimited
    integer, parameter :: nx = 5, nt = 3
    integer :: i
    real, dimension(nx, nt), parameter :: read_data = reshape([(i, i=1, nx*nt)], shape(read_data))
    real, dimension(nx, nt) :: expected_data
    integer :: x_dim_id, y_dim_id, var_id

    call neasyf_dim(file_id, "x", dim_size=nx, dimid=x_dim_id)
    call neasyf_dim(file_id, "t", unlimited=.true.)
    call neasyf_write(file_id, "data", read_data(:, 1), dim_names=["x", "t"], start=[1, 1])
    call neasyf_write(file_id, "data", read_data(:, 2), dim_names=["x", "t"], start=[1, 2])
    call neasyf_write(file_id, "data", read_data(:, 3), dim_names=["x", "t"], start=[1, 3])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_2d_unlimited

  @test
  subroutine test_write_scalar_character
    character(len=*), parameter :: expected_data = "some words"
    character(len=len(expected_data)) :: read_data
    integer :: var_id

    call neasyf_write(file_id, "data", values=expected_data)
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, read_data))
    call neasyf_close(file_id)

    @assertEqual(read_data, expected_data)

  end subroutine test_write_scalar_character

  @test
  subroutine test_write_1d_dim_names
    integer, parameter :: NX = 5
    real, dimension(NX), parameter :: read_data = [55.5, 44.4, 33.3, 22.2, 11.1]
    real, dimension(NX) :: expected_data
    integer :: var_id

    call neasyf_dim(file_id, "x", dim_size=NX)
    call neasyf_write(file_id, "data", read_data, dim_names=["x"])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_1d_dim_names

  @test
  subroutine test_write_2d_dim_names
    integer, parameter :: nx = 5, ny = 3
    integer :: i
    real, dimension(nx, ny), parameter :: read_data = reshape([(i, i=1, nx*ny)], shape(read_data))
    real, dimension(nx, ny) :: expected_data
    integer :: var_id

    call neasyf_dim(file_id, "x", dim_size=nx)
    call neasyf_dim(file_id, "longer_dim", dim_size=ny)
    call neasyf_write(file_id, "data", read_data, dim_names=[character(len=len("longer_dim"))::"x", "longer_dim"])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
  end subroutine test_write_2d_dim_names

  @test
  subroutine test_write_2d_compressed
    integer, parameter :: nx = 5, nt = 3
    integer :: i
    real, dimension(nx, nt), parameter :: read_data = reshape([(i, i=1, nx*nt)], shape(read_data))
    real, dimension(nx, nt) :: expected_data
    integer, parameter :: expected_deflate_level = 1
    integer :: x_dim_id, y_dim_id, var_id, deflate_level
    logical :: shuffle

    call neasyf_dim(file_id, "x", dim_size=nx, dimid=x_dim_id)
    call neasyf_dim(file_id, "t", unlimited=.true.)
    call neasyf_write(file_id, "data", read_data(:, 1), dim_names=["x", "t"], start=[1, 1], &
         compression=expected_deflate_level)
    call neasyf_write(file_id, "data", read_data(:, 2), dim_names=["x", "t"], start=[1, 2], &
         compression=expected_deflate_level)
    call neasyf_write(file_id, "data", read_data(:, 3), dim_names=["x", "t"], start=[1, 3], &
         compression=expected_deflate_level)
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_error(nf90_inquire_variable(file_id, var_id, shuffle=shuffle, deflate_level=deflate_level))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
    @assertEqual(expected_deflate_level, deflate_level)
    @assertEqual(shuffle, .true.)
  end subroutine test_write_2d_compressed

  @test
  subroutine test_write_2d_default_compressed
    integer, parameter :: nx = 5, nt = 3
    integer :: i
    real, dimension(nx, nt), parameter :: read_data = reshape([(i, i=1, nx*nt)], shape(read_data))
    real, dimension(nx, nt) :: expected_data
    integer, parameter :: expected_deflate_level = 1
    integer :: x_dim_id, y_dim_id, var_id, deflate_level
    logical :: shuffle

    call neasyf_dim(file_id, "x", dim_size=nx, dimid=x_dim_id)
    call neasyf_dim(file_id, "t", unlimited=.true.)
    neasyf_default_compression = expected_deflate_level
    call neasyf_write(file_id, "data", read_data(:, 1), dim_names=["x", "t"], start=[1, 1])
    call neasyf_write(file_id, "data", read_data(:, 2), dim_names=["x", "t"], start=[1, 2])
    call neasyf_write(file_id, "data", read_data(:, 3), dim_names=["x", "t"], start=[1, 3])
    call neasyf_close(file_id)

    call neasyf_error(nf90_open(temp_file, NF90_NOWRITE, file_id))
    call neasyf_error(nf90_inq_varid(file_id, "data", var_id))
    call neasyf_error(nf90_get_var(file_id, var_id, expected_data))
    call neasyf_error(nf90_inquire_variable(file_id, var_id, shuffle=shuffle, deflate_level=deflate_level))
    call neasyf_close(file_id)

    @assertEqual(expected_data, read_data)
    @assertEqual(expected_deflate_level, deflate_level)
    @assertEqual(shuffle, .true.)
  end subroutine test_write_2d_default_compressed
end module test_write
