module test_read
  use funit
  use netcdf
  use neasyf
  implicit none

  character(len=1024) :: temp_file
  integer :: file_id

contains
  @before
  subroutine setup
    character(len=1024) :: temp_dir
    integer :: length, status

    call get_environment_variable("TMP", temp_dir, length, status)
    if (length == 0 .or. status /= 0) call get_environment_variable("TEMP", temp_dir, length, status)
    if (length == 0 .or. status /= 0) call get_environment_variable("TMPDIR", temp_dir, length, status)
    if (length == 0 .or. status /= 0) temp_dir = "/tmp"

    temp_file = trim(temp_dir) // "/test.nc"

    file_id = neasyf_open(temp_file, "w")
  end subroutine setup
  
  @after
  subroutine teardown
    integer :: unit
    open(newunit=unit, file=temp_file)
    close(unit, status="delete")
  end subroutine teardown

  @test
  subroutine test_read_1d
    integer, parameter :: NX = 5
    real, dimension(NX), parameter :: expected_data = [55.5, 44.4, 33.3, 22.2, 11.1]
    real, dimension(NX) :: read_data
    integer :: x_dim_id, var_id

    call neasyf_dim(file_id, "x", dim_size=NX, dimid=x_dim_id)
    call neasyf_write(file_id, "data", expected_data, [x_dim_id])
    call neasyf_close(file_id)

    file_id = neasyf_open(temp_file, "r")
    call neasyf_read(file_id, "data", read_data)
    call neasyf_close(file_id)

    @assertEqual(read_data, expected_data)
  end subroutine test_read_1d
  
  @test
  subroutine test_read_2d
    integer, parameter :: nx = 5, ny = 3
    integer :: i
    real, dimension(nx, ny), parameter :: expected_data = reshape([(i, i=1, nx*ny)], shape(expected_data))
    real, dimension(nx, ny) :: read_data
    integer :: x_dim_id, y_dim_id, var_id

    call neasyf_dim(file_id, "x", dim_size=nx, dimid=x_dim_id)
    call neasyf_dim(file_id, "y", dim_size=ny, dimid=y_dim_id)
    call neasyf_write(file_id, "data", expected_data, [x_dim_id, y_dim_id])
    call neasyf_close(file_id)

    file_id = neasyf_open(temp_file, "r")
    call neasyf_read(file_id, "data", read_data)
    call neasyf_close(file_id)

    @assertEqual(read_data, expected_data)
  end subroutine test_read_2d

  @test
  subroutine test_read_scalar_character
    character(len=*), parameter :: expected_data = "some words"
    character(len=len(expected_data)) :: read_data
    integer :: var_id

    call neasyf_write(file_id, "data", values="some words")
    call neasyf_close(file_id)

    file_id = neasyf_open(temp_file, "r")
    call neasyf_read(file_id, "data", read_data)
    call neasyf_close(file_id)

    @assertEqual(read_data, expected_data)

  end subroutine test_read_scalar_character

end module test_read
